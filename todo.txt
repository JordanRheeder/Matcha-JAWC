var userSchema = new Schema({
    firstname: {type: String, trim:true, required: [true, "can't be blank"]},
    lastname: {type: String, trim:true, required: [true, "can't be blank"]},
    email: {type: String, required: [true, "can't be blank"], match: [/\S+@\S+\.\S+/, 'is invalid'], index: true, unique: true, trim: true},
    username: {type: String, trim:true, required: [true, "can't be blank"]},
    password: {type: String, trim:true, required: [true, "can't be blank"]},
	hash: {type: String, trim:true, required: [true, "can't be blank"]},
    gender: {type: String, trim:true, required: [true, "can't be blank"]},
    sexuality: {type: String, trim:true, required: [true, "can't be blank"]},
    verified: {type: Boolean, default: false, required: false},
    age: {type: String, trim:true, required: [true, "can't be blank"]},
    bio: {type: String, trim:true, required: false},
    interests: {type: Array, trim:true, required: false},
    pp: {type: String, default: '', required: false, trim: true},
    pp2: {type: String, default: '', required: false, trim: true},
    pp3: {type: String, default: '', required: false, trim: true},
    pp4: {type: String, default: '', required: false, trim: true},
    pp5: {type: String, default: '', required: false, trim: true},
    location: {type: JSON, default: '', required: false, trim: true},
    ip: {type: String, default: '', required: false, trim: true},
    fame: {type: String, required: false, defualt: 0, trim:true}


0.5: reimplement image query --x

1: interests will be handled as strings/json and iterate until # and then put that into db to do queries.

1.5: Biography upload to db
1.5.5: display that on a user-profile-page (implement)



2: grab users ip location, research api



3: min-max fame rating


3.5: Allow for multiple image uploads for users. Need to reimplement the storage of images due to not owning sessions of other users... store images locally for time being. Get things done fast af


GOAL FOR THURSDAY -->||

4: search for users 

5: match users 

6: validation on inputs
        -> unique usernames, emails
        -> check for garbage inputs (ie. username that 100000 letters long etc.)

7: server crashes on wrong password/email, due to the IP tracking. IP tracking needs to be moved to auth/login.js in the if case where email and password is correct.